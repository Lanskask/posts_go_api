// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package repository is a generated GoMock package.
package repository

import (
	entity "entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPostRepo is a mock of IPostRepo interface.
type MockIPostRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIPostRepoMockRecorder
}

// MockIPostRepoMockRecorder is the mock recorder for MockIPostRepo.
type MockIPostRepoMockRecorder struct {
	mock *MockIPostRepo
}

// NewMockIPostRepo creates a new mock instance.
func NewMockIPostRepo(ctrl *gomock.Controller) *MockIPostRepo {
	mock := &MockIPostRepo{ctrl: ctrl}
	mock.recorder = &MockIPostRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPostRepo) EXPECT() *MockIPostRepoMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockIPostRepo) FindAll() ([]entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIPostRepoMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIPostRepo)(nil).FindAll))
}

// Save mocks base method.
func (m *MockIPostRepo) Save(post *entity.Post) (*entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", post)
	ret0, _ := ret[0].(*entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockIPostRepoMockRecorder) Save(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIPostRepo)(nil).Save), post)
}
