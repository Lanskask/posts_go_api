// Code generated by MockGen. DO NOT EDIT.
// Source: post_service.go

// Package mock_service is a generated GoMock package.
package service

import (
	entity "entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPostService is a mock of IPostService interface.
type MockIPostService struct {
	ctrl     *gomock.Controller
	recorder *MockIPostServiceMockRecorder
}

// MockIPostServiceMockRecorder is the mock recorder for MockIPostService.
type MockIPostServiceMockRecorder struct {
	mock *MockIPostService
}

// NewMockIPostService creates a new mock instance.
func NewMockIPostService(ctrl *gomock.Controller) *MockIPostService {
	mock := &MockIPostService{ctrl: ctrl}
	mock.recorder = &MockIPostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPostService) EXPECT() *MockIPostServiceMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockIPostService) FindAll() ([]entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIPostServiceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIPostService)(nil).FindAll))
}

// Save mocks base method.
func (m *MockIPostService) Save(post *entity.Post) (*entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", post)
	ret0, _ := ret[0].(*entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockIPostServiceMockRecorder) Save(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIPostService)(nil).Save), post)
}

// Validate mocks base method.
func (m *MockIPostService) Validate(post *entity.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockIPostServiceMockRecorder) Validate(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockIPostService)(nil).Validate), post)
}
